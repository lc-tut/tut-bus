// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bus_stops.sql

package postgres

import (
	"context"
	"database/sql"
)

const createBusStop = `-- name: CreateBusStop :one
INSERT INTO bus_stops (name, lat, lng)
VALUES ($1, $2, $3)
RETURNING id, name, lat, lng, created_at, updated_at
`

type CreateBusStopParams struct {
	Name string          `json:"name"`
	Lat  sql.NullFloat64 `json:"lat"`
	Lng  sql.NullFloat64 `json:"lng"`
}

func (q *Queries) CreateBusStop(ctx context.Context, arg CreateBusStopParams) (BusStop, error) {
	row := q.db.QueryRowContext(ctx, createBusStop, arg.Name, arg.Lat, arg.Lng)
	var i BusStop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBusStop = `-- name: DeleteBusStop :exec
DELETE FROM bus_stops WHERE id = $1
`

func (q *Queries) DeleteBusStop(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBusStop, id)
	return err
}

const getBusStop = `-- name: GetBusStop :one
SELECT id, name, lat, lng, created_at, updated_at FROM bus_stops WHERE id = $1
`

func (q *Queries) GetBusStop(ctx context.Context, id int32) (BusStop, error) {
	row := q.db.QueryRowContext(ctx, getBusStop, id)
	var i BusStop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBusStops = `-- name: ListBusStops :many
SELECT id, name, lat, lng, created_at, updated_at FROM bus_stops ORDER BY name
`

func (q *Queries) ListBusStops(ctx context.Context) ([]BusStop, error) {
	rows, err := q.db.QueryContext(ctx, listBusStops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BusStop{}
	for rows.Next() {
		var i BusStop
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Lng,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBusStop = `-- name: UpdateBusStop :exec
UPDATE bus_stops 
SET name = $2, lat = $3, lng = $4
WHERE id = $1
`

type UpdateBusStopParams struct {
	ID   int32           `json:"id"`
	Name string          `json:"name"`
	Lat  sql.NullFloat64 `json:"lat"`
	Lng  sql.NullFloat64 `json:"lng"`
}

func (q *Queries) UpdateBusStop(ctx context.Context, arg UpdateBusStopParams) error {
	_, err := q.db.ExecContext(ctx, updateBusStop,
		arg.ID,
		arg.Name,
		arg.Lat,
		arg.Lng,
	)
	return err
}
