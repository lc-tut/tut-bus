// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ModelsFixedSegmentSegmentType.
const (
	Fixed ModelsFixedSegmentSegmentType = "fixed"
)

// Defines values for ModelsFrequencySegmentSegmentType.
const (
	Frequency ModelsFrequencySegmentSegmentType = "frequency"
)

// Defines values for ModelsShuttleSegmentSegmentType.
const (
	Shuttle ModelsShuttleSegmentSegmentType = "shuttle"
)

// Defines values for RoutesTimetableBadRequestCode.
const (
	BadRequest RoutesTimetableBadRequestCode = "BadRequest"
)

// Defines values for RoutesTimetableBadRequestDetail.
const (
	ThedateQueryMustBeInYYYYMMDDFormat RoutesTimetableBadRequestDetail = "The 'date' query must be in YYYY-MM-DD format."
)

// Defines values for RoutesTimetableBadRequestMessage.
const (
	InvalidDate RoutesTimetableBadRequestMessage = "InvalidDate"
)

// ModelsBusStop defines model for Models.BusStop.
type ModelsBusStop struct {
	Id   int32             `json:"id"`
	Lat  *ScalarsLatitude  `json:"lat,omitempty"`
	Lng  *ScalarsLongitude `json:"lng,omitempty"`
	Name string            `json:"name"`
}

// ModelsBusStopGroup defines model for Models.BusStopGroup.
type ModelsBusStopGroup struct {
	BusStops []ModelsBusStop `json:"busStops"`
	Id       int32           `json:"id"`
	Name     string          `json:"name"`
}

// ModelsBusStopGroupTimetable defines model for Models.BusStopGroupTimetable.
type ModelsBusStopGroupTimetable struct {
	Date     ScalarsDateISO         `json:"date"`
	Id       int32                  `json:"id"`
	Name     string                 `json:"name"`
	Segments []ModelsBusStopSegment `json:"segments"`
}

// ModelsBusStopSegment defines model for Models.BusStopSegment.
type ModelsBusStopSegment struct {
	union json.RawMessage
}

// ModelsBusStopTimetable defines model for Models.BusStopTimetable.
type ModelsBusStopTimetable struct {
	Date     ScalarsDateISO         `json:"date"`
	Id       int32                  `json:"id"`
	Lat      ScalarsLatitude        `json:"lat"`
	Lon      ScalarsLongitude       `json:"lon"`
	Name     string                 `json:"name"`
	Segments []ModelsBusStopSegment `json:"segments"`
}

// ModelsFixedSegment defines model for Models.FixedSegment.
type ModelsFixedSegment struct {
	Destination ModelsStopRef                 `json:"destination"`
	SegmentType ModelsFixedSegmentSegmentType `json:"segmentType"`
	Times       []ModelsTimePair              `json:"times"`
}

// ModelsFixedSegmentSegmentType defines model for ModelsFixedSegment.SegmentType.
type ModelsFixedSegmentSegmentType string

// ModelsFrequencySegment defines model for Models.FrequencySegment.
type ModelsFrequencySegment struct {
	Destination  ModelsStopRef                     `json:"destination"`
	EndTime      ScalarsTimeISO                    `json:"endTime"`
	IntervalMins int32                             `json:"intervalMins"`
	SegmentType  ModelsFrequencySegmentSegmentType `json:"segmentType"`
	StartTime    ScalarsTimeISO                    `json:"startTime"`
}

// ModelsFrequencySegmentSegmentType defines model for ModelsFrequencySegment.SegmentType.
type ModelsFrequencySegmentSegmentType string

// ModelsShuttleSegment defines model for Models.ShuttleSegment.
type ModelsShuttleSegment struct {
	Destination   ModelsStopRef  `json:"destination"`
	EndTime       ScalarsTimeISO `json:"endTime"`
	IntervalRange struct {
		Max int32 `json:"max"`
		Min int32 `json:"min"`
	} `json:"intervalRange"`
	SegmentType ModelsShuttleSegmentSegmentType `json:"segmentType"`
	StartTime   ScalarsTimeISO                  `json:"startTime"`
}

// ModelsShuttleSegmentSegmentType defines model for ModelsShuttleSegment.SegmentType.
type ModelsShuttleSegmentSegmentType string

// ModelsStopRef defines model for Models.StopRef.
type ModelsStopRef struct {
	Lat      *ScalarsLatitude  `json:"lat,omitempty"`
	Lon      *ScalarsLongitude `json:"lon,omitempty"`
	StopId   int32             `json:"stopId"`
	StopName string            `json:"stopName"`
}

// ModelsTimePair defines model for Models.TimePair.
type ModelsTimePair struct {
	Arrival   ScalarsTimeISO `json:"arrival"`
	Departure ScalarsTimeISO `json:"departure"`
}

// RoutesTimetableBadRequest HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest struct {
	Code    RoutesTimetableBadRequestCode    `json:"code"`
	Detail  RoutesTimetableBadRequestDetail  `json:"detail"`
	Message RoutesTimetableBadRequestMessage `json:"message"`
}

// RoutesTimetableBadRequestCode defines model for RoutesTimetableBadRequest.Code.
type RoutesTimetableBadRequestCode string

// RoutesTimetableBadRequestDetail defines model for RoutesTimetableBadRequest.Detail.
type RoutesTimetableBadRequestDetail string

// RoutesTimetableBadRequestMessage defines model for RoutesTimetableBadRequest.Message.
type RoutesTimetableBadRequestMessage string

// ScalarsDateISO defines model for Scalars.DateISO.
type ScalarsDateISO = openapi_types.Date

// ScalarsLatitude defines model for Scalars.Latitude.
type ScalarsLatitude = float32

// ScalarsLongitude defines model for Scalars.Longitude.
type ScalarsLongitude = float32

// ScalarsTimeISO defines model for Scalars.TimeISO.
type ScalarsTimeISO = string

// BusStopGroupServiceGetBusStopGroupsTimetableParams defines parameters for BusStopGroupServiceGetBusStopGroupsTimetable.
type BusStopGroupServiceGetBusStopGroupsTimetableParams struct {
	Date ScalarsDateISO `form:"date" json:"date"`
}

// BusStopServiceGetAllBusStopsParams defines parameters for BusStopServiceGetAllBusStops.
type BusStopServiceGetAllBusStopsParams struct {
	GroupId *int32 `form:"group_id,omitempty" json:"group_id,omitempty"`
}

// BusStopServiceGetBusStopTimetableParams defines parameters for BusStopServiceGetBusStopTimetable.
type BusStopServiceGetBusStopTimetableParams struct {
	Date ScalarsDateISO `form:"date" json:"date"`
}

// AsModelsFixedSegment returns the union data inside the ModelsBusStopSegment as a ModelsFixedSegment
func (t ModelsBusStopSegment) AsModelsFixedSegment() (ModelsFixedSegment, error) {
	var body ModelsFixedSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsFixedSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) FromModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsFixedSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) MergeModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelsFrequencySegment returns the union data inside the ModelsBusStopSegment as a ModelsFrequencySegment
func (t ModelsBusStopSegment) AsModelsFrequencySegment() (ModelsFrequencySegment, error) {
	var body ModelsFrequencySegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsFrequencySegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsFrequencySegment
func (t *ModelsBusStopSegment) FromModelsFrequencySegment(v ModelsFrequencySegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsFrequencySegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsFrequencySegment
func (t *ModelsBusStopSegment) MergeModelsFrequencySegment(v ModelsFrequencySegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelsShuttleSegment returns the union data inside the ModelsBusStopSegment as a ModelsShuttleSegment
func (t ModelsBusStopSegment) AsModelsShuttleSegment() (ModelsShuttleSegment, error) {
	var body ModelsShuttleSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsShuttleSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) FromModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsShuttleSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) MergeModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModelsBusStopSegment) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModelsBusStopSegment) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/bus-stop-groups)
	BusStopGroupServiceGetAllBusStopGroups(ctx echo.Context) error

	// (GET /api/bus-stop-groups/{id})
	BusStopGroupServiceGetBusStopGroupDetails(ctx echo.Context, id int32) error

	// (GET /api/bus-stop-groups/{id}/timetable)
	BusStopGroupServiceGetBusStopGroupsTimetable(ctx echo.Context, id int32, params BusStopGroupServiceGetBusStopGroupsTimetableParams) error

	// (GET /api/bus-stops)
	BusStopServiceGetAllBusStops(ctx echo.Context, params BusStopServiceGetAllBusStopsParams) error

	// (GET /api/bus-stops/{id})
	BusStopServiceGetBusStopDetails(ctx echo.Context, id int32) error

	// (GET /api/bus-stops/{id}/timetable)
	BusStopServiceGetBusStopTimetable(ctx echo.Context, id int32, params BusStopServiceGetBusStopTimetableParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BusStopGroupServiceGetAllBusStopGroups converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupServiceGetAllBusStopGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupServiceGetAllBusStopGroups(ctx)
	return err
}

// BusStopGroupServiceGetBusStopGroupDetails converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupServiceGetBusStopGroupDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupServiceGetBusStopGroupDetails(ctx, id)
	return err
}

// BusStopGroupServiceGetBusStopGroupsTimetable converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupServiceGetBusStopGroupsTimetable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopGroupServiceGetBusStopGroupsTimetableParams
	// ------------- Required query parameter "date" -------------

	err = runtime.BindQueryParameter("form", false, true, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupServiceGetBusStopGroupsTimetable(ctx, id, params)
	return err
}

// BusStopServiceGetAllBusStops converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetAllBusStops(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopServiceGetAllBusStopsParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetAllBusStops(ctx, params)
	return err
}

// BusStopServiceGetBusStopDetails converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetBusStopDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetBusStopDetails(ctx, id)
	return err
}

// BusStopServiceGetBusStopTimetable converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetBusStopTimetable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopServiceGetBusStopTimetableParams
	// ------------- Required query parameter "date" -------------

	err = runtime.BindQueryParameter("form", false, true, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetBusStopTimetable(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/bus-stop-groups", wrapper.BusStopGroupServiceGetAllBusStopGroups)
	router.GET(baseURL+"/api/bus-stop-groups/:id", wrapper.BusStopGroupServiceGetBusStopGroupDetails)
	router.GET(baseURL+"/api/bus-stop-groups/:id/timetable", wrapper.BusStopGroupServiceGetBusStopGroupsTimetable)
	router.GET(baseURL+"/api/bus-stops", wrapper.BusStopServiceGetAllBusStops)
	router.GET(baseURL+"/api/bus-stops/:id", wrapper.BusStopServiceGetBusStopDetails)
	router.GET(baseURL+"/api/bus-stops/:id/timetable", wrapper.BusStopServiceGetBusStopTimetable)

}
