// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ModelsFixedSegmentSegmentType.
const (
	Fixed ModelsFixedSegmentSegmentType = "fixed"
)

// Defines values for ModelsFrequencySegmentSegmentType.
const (
	Frequency ModelsFrequencySegmentSegmentType = "frequency"
)

// Defines values for ModelsShuttleSegmentSegmentType.
const (
	Shuttle ModelsShuttleSegmentSegmentType = "shuttle"
)

// Defines values for RoutesTimetableBadRequestCode.
const (
	BadRequest RoutesTimetableBadRequestCode = "BadRequest"
)

// Defines values for RoutesTimetableBadRequestDetail.
const (
	ThedateQueryMustBeInYYYYMMDDFormat RoutesTimetableBadRequestDetail = "The 'date' query must be in YYYY-MM-DD format."
)

// Defines values for RoutesTimetableBadRequestMessage.
const (
	InvalidDate RoutesTimetableBadRequestMessage = "InvalidDate"
)

// ModelsBusStop defines model for Models.BusStop.
type ModelsBusStop struct {
	Id   int32             `json:"id"`
	Lat  *ScalarsLatitude  `json:"lat,omitempty"`
	Lng  *ScalarsLongitude `json:"lng,omitempty"`
	Name string            `json:"name"`
}

// ModelsBusStopGroup defines model for Models.BusStopGroup.
type ModelsBusStopGroup struct {
	BusStops []ModelsBusStop `json:"busStops"`
	Id       int32           `json:"id"`
	Name     string          `json:"name"`
}

// ModelsBusStopGroupTimetable defines model for Models.BusStopGroupTimetable.
type ModelsBusStopGroupTimetable struct {
	Date     ScalarsDateISO         `json:"date"`
	Id       int32                  `json:"id"`
	Name     string                 `json:"name"`
	Segments []ModelsBusStopSegment `json:"segments"`
}

// ModelsBusStopSegment defines model for Models.BusStopSegment.
type ModelsBusStopSegment struct {
	union json.RawMessage
}

// ModelsBusStopTimetable defines model for Models.BusStopTimetable.
type ModelsBusStopTimetable struct {
	Date     ScalarsDateISO         `json:"date"`
	Id       int32                  `json:"id"`
	Lat      ScalarsLatitude        `json:"lat"`
	Lon      ScalarsLongitude       `json:"lon"`
	Name     string                 `json:"name"`
	Segments []ModelsBusStopSegment `json:"segments"`
}

// ModelsFixedSegment defines model for Models.FixedSegment.
type ModelsFixedSegment struct {
	Destination ModelsStopRef                 `json:"destination"`
	SegmentType ModelsFixedSegmentSegmentType `json:"segmentType"`
	Times       []ModelsTimePair              `json:"times"`
}

// ModelsFixedSegmentSegmentType defines model for ModelsFixedSegment.SegmentType.
type ModelsFixedSegmentSegmentType string

// ModelsFrequencySegment defines model for Models.FrequencySegment.
type ModelsFrequencySegment struct {
	Destination  ModelsStopRef                     `json:"destination"`
	EndTime      ScalarsTimeISO                    `json:"endTime"`
	IntervalMins int32                             `json:"intervalMins"`
	SegmentType  ModelsFrequencySegmentSegmentType `json:"segmentType"`
	StartTime    ScalarsTimeISO                    `json:"startTime"`
}

// ModelsFrequencySegmentSegmentType defines model for ModelsFrequencySegment.SegmentType.
type ModelsFrequencySegmentSegmentType string

// ModelsShuttleSegment defines model for Models.ShuttleSegment.
type ModelsShuttleSegment struct {
	Destination   ModelsStopRef  `json:"destination"`
	EndTime       ScalarsTimeISO `json:"endTime"`
	IntervalRange struct {
		Max int32 `json:"max"`
		Min int32 `json:"min"`
	} `json:"intervalRange"`
	SegmentType ModelsShuttleSegmentSegmentType `json:"segmentType"`
	StartTime   ScalarsTimeISO                  `json:"startTime"`
}

// ModelsShuttleSegmentSegmentType defines model for ModelsShuttleSegment.SegmentType.
type ModelsShuttleSegmentSegmentType string

// ModelsStopRef defines model for Models.StopRef.
type ModelsStopRef struct {
	Lat      *ScalarsLatitude  `json:"lat,omitempty"`
	Lng      *ScalarsLongitude `json:"lng,omitempty"`
	StopId   int32             `json:"stopId"`
	StopName string            `json:"stopName"`
}

// ModelsTimePair defines model for Models.TimePair.
type ModelsTimePair struct {
	Arrival   ScalarsTimeISO `json:"arrival"`
	Departure ScalarsTimeISO `json:"departure"`
}

// RoutesTimetableBadRequest HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest struct {
	Code    RoutesTimetableBadRequestCode    `json:"code"`
	Detail  RoutesTimetableBadRequestDetail  `json:"detail"`
	Message RoutesTimetableBadRequestMessage `json:"message"`
}

// RoutesTimetableBadRequestCode defines model for RoutesTimetableBadRequest.Code.
type RoutesTimetableBadRequestCode string

// RoutesTimetableBadRequestDetail defines model for RoutesTimetableBadRequest.Detail.
type RoutesTimetableBadRequestDetail string

// RoutesTimetableBadRequestMessage defines model for RoutesTimetableBadRequest.Message.
type RoutesTimetableBadRequestMessage string

// ScalarsDateISO defines model for Scalars.DateISO.
type ScalarsDateISO = openapi_types.Date

// ScalarsLatitude defines model for Scalars.Latitude.
type ScalarsLatitude = float64

// ScalarsLongitude defines model for Scalars.Longitude.
type ScalarsLongitude = float64

// ScalarsTimeISO defines model for Scalars.TimeISO.
type ScalarsTimeISO = string

// BusStopServiceGetAllBusStopsParams defines parameters for BusStopServiceGetAllBusStops.
type BusStopServiceGetAllBusStopsParams struct {
	GroupId *int32 `form:"group_id,omitempty" json:"group_id,omitempty"`
}

// BusStopGroupsServiceGetBusStopGroupsTimetableParams defines parameters for BusStopGroupsServiceGetBusStopGroupsTimetable.
type BusStopGroupsServiceGetBusStopGroupsTimetableParams struct {
	Date ScalarsDateISO `form:"date" json:"date"`
}

// BusStopTimetableServiceGetBusStopTimetableParams defines parameters for BusStopTimetableServiceGetBusStopTimetable.
type BusStopTimetableServiceGetBusStopTimetableParams struct {
	Date ScalarsDateISO `form:"date" json:"date"`
}

// AsModelsFixedSegment returns the union data inside the ModelsBusStopSegment as a ModelsFixedSegment
func (t ModelsBusStopSegment) AsModelsFixedSegment() (ModelsFixedSegment, error) {
	var body ModelsFixedSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsFixedSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) FromModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsFixedSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) MergeModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelsFrequencySegment returns the union data inside the ModelsBusStopSegment as a ModelsFrequencySegment
func (t ModelsBusStopSegment) AsModelsFrequencySegment() (ModelsFrequencySegment, error) {
	var body ModelsFrequencySegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsFrequencySegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsFrequencySegment
func (t *ModelsBusStopSegment) FromModelsFrequencySegment(v ModelsFrequencySegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsFrequencySegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsFrequencySegment
func (t *ModelsBusStopSegment) MergeModelsFrequencySegment(v ModelsFrequencySegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelsShuttleSegment returns the union data inside the ModelsBusStopSegment as a ModelsShuttleSegment
func (t ModelsBusStopSegment) AsModelsShuttleSegment() (ModelsShuttleSegment, error) {
	var body ModelsShuttleSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsShuttleSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) FromModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsShuttleSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) MergeModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModelsBusStopSegment) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModelsBusStopSegment) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/bus-stops)
	BusStopServiceGetAllBusStops(ctx echo.Context, params BusStopServiceGetAllBusStopsParams) error

	// (GET /api/bus-stops/groups)
	BusStopGroupsServiceGetAllBusStopGroups(ctx echo.Context) error

	// (GET /api/bus-stops/groups/{id})
	BusStopGroupsServiceGetBusStopGroupDetails(ctx echo.Context, id int32) error

	// (GET /api/bus-stops/groups/{id}/timetable)
	BusStopGroupsServiceGetBusStopGroupsTimetable(ctx echo.Context, id int32, params BusStopGroupsServiceGetBusStopGroupsTimetableParams) error

	// (GET /api/bus-stops/{id})
	BusStopServiceGetBusStopDetails(ctx echo.Context, id int32) error

	// (GET /api/bus-stops/{id}/timetable)
	BusStopTimetableServiceGetBusStopTimetable(ctx echo.Context, id int32, params BusStopTimetableServiceGetBusStopTimetableParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BusStopServiceGetAllBusStops converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetAllBusStops(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopServiceGetAllBusStopsParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetAllBusStops(ctx, params)
	return err
}

// BusStopGroupsServiceGetAllBusStopGroups converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupsServiceGetAllBusStopGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupsServiceGetAllBusStopGroups(ctx)
	return err
}

// BusStopGroupsServiceGetBusStopGroupDetails converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupsServiceGetBusStopGroupDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupsServiceGetBusStopGroupDetails(ctx, id)
	return err
}

// BusStopGroupsServiceGetBusStopGroupsTimetable converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupsServiceGetBusStopGroupsTimetable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopGroupsServiceGetBusStopGroupsTimetableParams
	// ------------- Required query parameter "date" -------------

	err = runtime.BindQueryParameter("form", false, true, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupsServiceGetBusStopGroupsTimetable(ctx, id, params)
	return err
}

// BusStopServiceGetBusStopDetails converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetBusStopDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetBusStopDetails(ctx, id)
	return err
}

// BusStopTimetableServiceGetBusStopTimetable converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopTimetableServiceGetBusStopTimetable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopTimetableServiceGetBusStopTimetableParams
	// ------------- Required query parameter "date" -------------

	err = runtime.BindQueryParameter("form", false, true, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopTimetableServiceGetBusStopTimetable(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/bus-stops", wrapper.BusStopServiceGetAllBusStops)
	router.GET(baseURL+"/api/bus-stops/groups", wrapper.BusStopGroupsServiceGetAllBusStopGroups)
	router.GET(baseURL+"/api/bus-stops/groups/:id", wrapper.BusStopGroupsServiceGetBusStopGroupDetails)
	router.GET(baseURL+"/api/bus-stops/groups/:id/timetable", wrapper.BusStopGroupsServiceGetBusStopGroupsTimetable)
	router.GET(baseURL+"/api/bus-stops/:id", wrapper.BusStopServiceGetBusStopDetails)
	router.GET(baseURL+"/api/bus-stops/:id/timetable", wrapper.BusStopTimetableServiceGetBusStopTimetable)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
