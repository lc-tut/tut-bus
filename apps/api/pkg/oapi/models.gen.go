// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ModelsFixedSegmentSegmentType.
const (
	Fixed ModelsFixedSegmentSegmentType = "fixed"
)

// Defines values for ModelsShuttleSegmentSegmentType.
const (
	Shuttle ModelsShuttleSegmentSegmentType = "shuttle"
)

// Defines values for RoutesTimetableBadRequestCode.
const (
	BadRequest RoutesTimetableBadRequestCode = "BadRequest"
)

// Defines values for RoutesTimetableBadRequestDetail.
const (
	ThedateQueryMustBeInYYYYMMDDFormat RoutesTimetableBadRequestDetail = "The 'date' query must be in YYYY-MM-DD format."
)

// Defines values for RoutesTimetableBadRequestMessage.
const (
	InvalidDate RoutesTimetableBadRequestMessage = "InvalidDate"
)

// ModelsBusStop defines model for Models.BusStop.
type ModelsBusStop struct {
	Id   int32             `json:"id"`
	Lat  *ScalarsLatitude  `json:"lat,omitempty"`
	Lng  *ScalarsLongitude `json:"lng,omitempty"`
	Name string            `json:"name"`
}

// ModelsBusStopGroup defines model for Models.BusStopGroup.
type ModelsBusStopGroup struct {
	BusStops []ModelsBusStop `json:"busStops"`
	Id       int32           `json:"id"`
	Name     string          `json:"name"`
}

// ModelsBusStopGroupTimetable defines model for Models.BusStopGroupTimetable.
type ModelsBusStopGroupTimetable struct {
	Date     ScalarsDateISO         `json:"date"`
	Id       int32                  `json:"id"`
	Name     string                 `json:"name"`
	Segments []ModelsBusStopSegment `json:"segments"`
}

// ModelsBusStopSegment defines model for Models.BusStopSegment.
type ModelsBusStopSegment struct {
	union json.RawMessage
}

// ModelsBusStopTimetable defines model for Models.BusStopTimetable.
type ModelsBusStopTimetable struct {
	Date     ScalarsDateISO         `json:"date"`
	Id       int32                  `json:"id"`
	Lat      ScalarsLatitude        `json:"lat"`
	Lon      ScalarsLongitude       `json:"lon"`
	Name     string                 `json:"name"`
	Segments []ModelsBusStopSegment `json:"segments"`
}

// ModelsFixedSegment defines model for Models.FixedSegment.
type ModelsFixedSegment struct {
	Destination ModelsStopRef                 `json:"destination"`
	SegmentType ModelsFixedSegmentSegmentType `json:"segmentType"`
	Times       []ModelsTimePair              `json:"times"`
}

// ModelsFixedSegmentSegmentType defines model for ModelsFixedSegment.SegmentType.
type ModelsFixedSegmentSegmentType string

// ModelsShuttleSegment defines model for Models.ShuttleSegment.
type ModelsShuttleSegment struct {
	Destination   ModelsStopRef  `json:"destination"`
	EndTime       ScalarsTimeISO `json:"endTime"`
	IntervalRange struct {
		Max int32 `json:"max"`
		Min int32 `json:"min"`
	} `json:"intervalRange"`
	SegmentType ModelsShuttleSegmentSegmentType `json:"segmentType"`
	StartTime   ScalarsTimeISO                  `json:"startTime"`
}

// ModelsShuttleSegmentSegmentType defines model for ModelsShuttleSegment.SegmentType.
type ModelsShuttleSegmentSegmentType string

// ModelsStopRef defines model for Models.StopRef.
type ModelsStopRef struct {
	Lat      *ScalarsLatitude  `json:"lat,omitempty"`
	Lng      *ScalarsLongitude `json:"lng,omitempty"`
	StopId   int32             `json:"stopId"`
	StopName string            `json:"stopName"`
}

// ModelsTimePair defines model for Models.TimePair.
type ModelsTimePair struct {
	Arrival   ScalarsTimeISO `json:"arrival"`
	Departure ScalarsTimeISO `json:"departure"`
}

// RoutesTimetableBadRequest HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest struct {
	Code    RoutesTimetableBadRequestCode    `json:"code"`
	Detail  RoutesTimetableBadRequestDetail  `json:"detail"`
	Message RoutesTimetableBadRequestMessage `json:"message"`
}

// RoutesTimetableBadRequestCode defines model for RoutesTimetableBadRequest.Code.
type RoutesTimetableBadRequestCode string

// RoutesTimetableBadRequestDetail defines model for RoutesTimetableBadRequest.Detail.
type RoutesTimetableBadRequestDetail string

// RoutesTimetableBadRequestMessage defines model for RoutesTimetableBadRequest.Message.
type RoutesTimetableBadRequestMessage string

// ScalarsDateISO defines model for Scalars.DateISO.
type ScalarsDateISO = openapi_types.Date

// ScalarsLatitude defines model for Scalars.Latitude.
type ScalarsLatitude = float64

// ScalarsLongitude defines model for Scalars.Longitude.
type ScalarsLongitude = float64

// ScalarsTimeISO defines model for Scalars.TimeISO.
type ScalarsTimeISO = string

// BusStopServiceGetAllBusStopsParams defines parameters for BusStopServiceGetAllBusStops.
type BusStopServiceGetAllBusStopsParams struct {
	GroupId *int32 `form:"group_id,omitempty" json:"group_id,omitempty"`
}

// BusStopGroupsServiceGetBusStopGroupsTimetableParams defines parameters for BusStopGroupsServiceGetBusStopGroupsTimetable.
type BusStopGroupsServiceGetBusStopGroupsTimetableParams struct {
	Date *ScalarsDateISO `form:"date,omitempty" json:"date,omitempty"`
}

// BusStopServiceGetBusStopTimetableParams defines parameters for BusStopServiceGetBusStopTimetable.
type BusStopServiceGetBusStopTimetableParams struct {
	Date *ScalarsDateISO `form:"date,omitempty" json:"date,omitempty"`
}

// AsModelsFixedSegment returns the union data inside the ModelsBusStopSegment as a ModelsFixedSegment
func (t ModelsBusStopSegment) AsModelsFixedSegment() (ModelsFixedSegment, error) {
	var body ModelsFixedSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsFixedSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) FromModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsFixedSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) MergeModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelsShuttleSegment returns the union data inside the ModelsBusStopSegment as a ModelsShuttleSegment
func (t ModelsBusStopSegment) AsModelsShuttleSegment() (ModelsShuttleSegment, error) {
	var body ModelsShuttleSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsShuttleSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) FromModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsShuttleSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) MergeModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModelsBusStopSegment) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModelsBusStopSegment) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/bus-stops)
	BusStopServiceGetAllBusStops(ctx echo.Context, params BusStopServiceGetAllBusStopsParams) error

	// (GET /api/bus-stops/groups)
	BusStopGroupsServiceGetAllBusStopGroups(ctx echo.Context) error

	// (GET /api/bus-stops/groups/{id})
	BusStopGroupsServiceGetBusStopGroupDetails(ctx echo.Context, id int32) error

	// (GET /api/bus-stops/groups/{id}/timetable)
	BusStopGroupsServiceGetBusStopGroupsTimetable(ctx echo.Context, id int32, params BusStopGroupsServiceGetBusStopGroupsTimetableParams) error

	// (GET /api/bus-stops/{id})
	BusStopServiceGetBusStopDetails(ctx echo.Context, id int32) error

	// (GET /api/bus-stops/{id}/timetable)
	BusStopServiceGetBusStopTimetable(ctx echo.Context, id int32, params BusStopServiceGetBusStopTimetableParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BusStopServiceGetAllBusStops converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetAllBusStops(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopServiceGetAllBusStopsParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetAllBusStops(ctx, params)
	return err
}

// BusStopGroupsServiceGetAllBusStopGroups converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupsServiceGetAllBusStopGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupsServiceGetAllBusStopGroups(ctx)
	return err
}

// BusStopGroupsServiceGetBusStopGroupDetails converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupsServiceGetBusStopGroupDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupsServiceGetBusStopGroupDetails(ctx, id)
	return err
}

// BusStopGroupsServiceGetBusStopGroupsTimetable converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopGroupsServiceGetBusStopGroupsTimetable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopGroupsServiceGetBusStopGroupsTimetableParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopGroupsServiceGetBusStopGroupsTimetable(ctx, id, params)
	return err
}

// BusStopServiceGetBusStopDetails converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetBusStopDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetBusStopDetails(ctx, id)
	return err
}

// BusStopServiceGetBusStopTimetable converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopServiceGetBusStopTimetable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopServiceGetBusStopTimetableParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopServiceGetBusStopTimetable(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/bus-stops", wrapper.BusStopServiceGetAllBusStops)
	router.GET(baseURL+"/api/bus-stops/groups", wrapper.BusStopGroupsServiceGetAllBusStopGroups)
	router.GET(baseURL+"/api/bus-stops/groups/:id", wrapper.BusStopGroupsServiceGetBusStopGroupDetails)
	router.GET(baseURL+"/api/bus-stops/groups/:id/timetable", wrapper.BusStopGroupsServiceGetBusStopGroupsTimetable)
	router.GET(baseURL+"/api/bus-stops/:id", wrapper.BusStopServiceGetBusStopDetails)
	router.GET(baseURL+"/api/bus-stops/:id/timetable", wrapper.BusStopServiceGetBusStopTimetable)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZe28TyxX/KqMpEq3kF5BKdP+piCJopPJQkqqKQlqNd4/tobs7y8xslMi1xNpNoS9R",
	"RdCUCvUhAUlB4nIF94HgwocZHPwxrmbWb2+cdeIb0L38Aco+5pzf+Z3zO3NmXcU28wLmgy8FtqpY2BXw",
	"iPnzInPAFbnZUCxKFug7AWcBcEnBPKeO/r/EuEcktjD15ZnTOIPlRgDxJZSB41oGu/p5FZ/gUMIW/lG+",
	"5zHfdpdftIlLuMj9kkgqQwfMMr+cehnzy911PvFAL2wDEZJTv4xrtQzmcD2kHBxsrWj07VdXu5hZ8RrY",
	"UtsYjP0CZ2ECAcX4aUyGBE8cBHeI0VrXMeGcbOjr1JxOGmSmhzZlvEvUA0mKLowG7hAJaVMzRyTML16e",
	"RnAZLKDsdSr1EIwvxstHiR9Dm4m1z/PB7HW8WFXMfLhcwtZKKpDn6To4PYip1ixWQild6K5aHUHzAdN4",
	"WN0zf5q6/yBVo0OPI5moggZKYDRfICT1iaQHE9QpD8mCBSj1kbBkPFcx+KGnQZe0xz5IPdYk9WBiynS1",
	"XSGUH0hWP5zMQGQdz2NoGqr66RIFvqOjSFuC+t2OMHwJfI24C8QvJ8jNI+spheNRP9WbQ5zqZRnjJom7",
	"fQpAxFwmloCQhMtDkTFBtntOetwPczmuFtqZG6H7mKcOIVkwn7Yz6pcvpdrB22b7lozhoqu+ETII53SN",
	"uIcoagcCwmXIj1wDPUOZLpykWBZYKCE2Y/atWeIswPUQhGxL2+Y0iKWNf7G0dAXNFApoljio/RbKoqUK",
	"IN6+sonvM4mKgALObBACHOSEgCRDtkvBlwg4ZzyHM0OU2cwZEEofjiStOCAJdfsXaBQndfM/ia6HwDeQ",
	"FwoDhPpoeXl5OXvxYnZuDsXlkks06oEQpDwAY95fIy519H6csGSIcxNDz0wXZRLvwzt9fyW3t7ARfCMC",
	"GljEQj12mI5EPY3+ZwXT2+KLrL5qW/RDrxgrY1Rb402eOjtg01zua7RTmloeRErguoZ+8+OfWyuFU6tX",
	"rzq/P71SyJ5Z/Ym1Usj+VN84MRp0zTT6EjPSpbpzWniJ/W6DoV/5dA24oHIDsRJaArviM5eVN9BsKNCv",
	"oYjOXZlHi8DXqK1DMO+aKi7kCrmCxskC8ElAsYXPmFsZDbNiqjFPApovhiIrOieOMiQIorm5qxp/V/WX",
	"zei+ip6++/pG69GOqm81b/+j+WZbRdsqeqOie+pGXdUfq8a2qn+lGjuq8VxFO6isx/7fUgep+tbeX282",
	"n/5Lv1r/i4p2Vf2ZajxRjdd6TbTz/ot/q/qfW29eq+ht8/ZnrcY3KtqJ7WITBjfdXfdD3J2iTOAXQJ5z",
	"3dnOWURHyIkHErgwczKsB64RXom4AjTV2MJGPp3hysIdnLormuaTbrNc1doQAfNFLPDThUKsc1+2pwgS",
	"BC61DfT8NREPDz0PUzni1Uyr6E9Zf7OqEIFEaNsADjg5I2dJysK0n1Cg9vlN3x6sh7yhJGVZDKRyXIns",
	"l0pzPBRJCY2f4OMnOj6hT59t1I5of87zVerU9iV+P9Zb/3/+/sUzFT1R0QMV/UFFjw5Pf//tOdPfE3Rl",
	"dKS7SU9GRkC93ULyEI5XUBOnd7J0ZvBMYWYiQInDxQy6xCQ6z0LfGRwtwEEcBAu5DchhIJCeM2CdCnnw",
	"MHGJSWNxzCghhmeJnttiKJCuwbhjjzhPOUn0czsGz/iRYnSSSE6SAL4GvDONlajvIJlI5ZF0mJf9XzuS",
	"FdknxOYfN5ubu83o/vu79/b+dENFT/fu1Zu3XrX+t6vqW0aIu6oeTU2dovcx5lgEmqkm7p+dDxKphDjy",
	"Aei4Zd/jLKG0OmPKtor+s7f98N2rfw4lMSFxpjFMD/KY88o0AX/qZB9BJztU9iZsZynniaPNECP96Xs6",
	"OCQlcZTDvcZm87+f/3DFdzTZfaeKmzBZqQ9MaaeFPvfjdd56cHPv7rN3r75svb3T/NuLQ4nw03gwkbhT",
	"TAZ72w8HMtd4rOovVeOWqm+13t752MaCSdF+aksfqi1Nnq/9OpP5ZUafjWKdD7oJONMiD7mLLVyRMhBW",
	"Pl9hZdD/crBOvMCFnM0883vx4FqX2cTNOrA2YMDK60ZonS0UClhLtY2p2hF/D5u2OHSzM7bUVmvfBgAA",
	"//+DmyRpOCIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
