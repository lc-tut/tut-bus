// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ModelsFixedSegmentSegmentType.
const (
	Fixed ModelsFixedSegmentSegmentType = "fixed"
)

// Defines values for ModelsFrequencySegmentSegmentType.
const (
	Frequency ModelsFrequencySegmentSegmentType = "frequency"
)

// Defines values for ModelsShuttleSegmentSegmentType.
const (
	Shuttle ModelsShuttleSegmentSegmentType = "shuttle"
)

// Defines values for RoutesTimetableBadRequest0Code.
const (
	RoutesTimetableBadRequest0CodeBadRequest RoutesTimetableBadRequest0Code = "BadRequest"
)

// Defines values for RoutesTimetableBadRequest0Detail.
const (
	ThedateQueryMustBeInYYYYMMDDFormat RoutesTimetableBadRequest0Detail = "The 'date' query must be in YYYY-MM-DD format."
)

// Defines values for RoutesTimetableBadRequest0Message.
const (
	InvalidDate RoutesTimetableBadRequest0Message = "InvalidDate"
)

// Defines values for RoutesTimetableBadRequest1Code.
const (
	RoutesTimetableBadRequest1CodeBadRequest RoutesTimetableBadRequest1Code = "BadRequest"
)

// Defines values for RoutesTimetableBadRequest1Detail.
const (
	BothfromAndtoQueriesMustBeInYYYYMMDDFormat RoutesTimetableBadRequest1Detail = "Both 'from' and 'to' queries must be in YYYY-MM-DD format."
)

// Defines values for RoutesTimetableBadRequest1Message.
const (
	InvalidRange RoutesTimetableBadRequest1Message = "InvalidRange"
)

// Defines values for RoutesTimetableBadRequest2Code.
const (
	RoutesTimetableBadRequest2CodeBadRequest RoutesTimetableBadRequest2Code = "BadRequest"
)

// Defines values for RoutesTimetableBadRequest2Detail.
const (
	TheRequestedDateRangeExceeds7Days RoutesTimetableBadRequest2Detail = "The requested date range exceeds 7 days."
)

// Defines values for RoutesTimetableBadRequest2Message.
const (
	RangeTooLong RoutesTimetableBadRequest2Message = "RangeTooLong"
)

// Defines values for RoutesTimetableBadRequest3Code.
const (
	RoutesTimetableBadRequest3CodeBadRequest RoutesTimetableBadRequest3Code = "BadRequest"
)

// Defines values for RoutesTimetableBadRequest3Detail.
const (
	ProvideEitherdateOrfromtoButNotBoth RoutesTimetableBadRequest3Detail = "Provide either 'date' or 'from'/'to', but not both."
)

// Defines values for RoutesTimetableBadRequest3Message.
const (
	DateRangeExclusive RoutesTimetableBadRequest3Message = "DateRangeExclusive"
)

// Defines values for RoutesTimetableBadRequest4Code.
const (
	BadRequest RoutesTimetableBadRequest4Code = "BadRequest"
)

// Defines values for RoutesTimetableBadRequest4Detail.
const (
	ThefromDateMustBeOnOrBeforeThetoDate RoutesTimetableBadRequest4Detail = "The 'from' date must be on or before the 'to' date."
)

// Defines values for RoutesTimetableBadRequest4Message.
const (
	FromAfterTo RoutesTimetableBadRequest4Message = "FromAfterTo"
)

// ModelsBusStop defines model for Models.BusStop.
type ModelsBusStop struct {
	Id   int32             `json:"id"`
	Lat  *ScalarsLatitude  `json:"lat,omitempty"`
	Lon  *ScalarsLongitude `json:"lon,omitempty"`
	Name string            `json:"name"`
}

// ModelsBusStopSegment defines model for Models.BusStopSegment.
type ModelsBusStopSegment struct {
	union json.RawMessage
}

// ModelsBusStopTimetable defines model for Models.BusStopTimetable.
type ModelsBusStopTimetable struct {
	Date     ScalarsDateISO         `json:"date"`
	Id       int32                  `json:"id"`
	Lat      ScalarsLatitude        `json:"lat"`
	Lon      ScalarsLongitude       `json:"lon"`
	Name     string                 `json:"name"`
	Segments []ModelsBusStopSegment `json:"segments"`
}

// ModelsFixedSegment defines model for Models.FixedSegment.
type ModelsFixedSegment struct {
	Destination ModelsStopRef                 `json:"destination"`
	SegmentType ModelsFixedSegmentSegmentType `json:"segmentType"`
	Times       []ModelsTimePair              `json:"times"`
}

// ModelsFixedSegmentSegmentType defines model for ModelsFixedSegment.SegmentType.
type ModelsFixedSegmentSegmentType string

// ModelsFrequencySegment defines model for Models.FrequencySegment.
type ModelsFrequencySegment struct {
	Destination  ModelsStopRef                     `json:"destination"`
	EndTime      ScalarsTimeISO                    `json:"endTime"`
	IntervalMins int32                             `json:"intervalMins"`
	SegmentType  ModelsFrequencySegmentSegmentType `json:"segmentType"`
	StartTime    ScalarsTimeISO                    `json:"startTime"`
}

// ModelsFrequencySegmentSegmentType defines model for ModelsFrequencySegment.SegmentType.
type ModelsFrequencySegmentSegmentType string

// ModelsShuttleSegment defines model for Models.ShuttleSegment.
type ModelsShuttleSegment struct {
	Destination   ModelsStopRef  `json:"destination"`
	EndTime       ScalarsTimeISO `json:"endTime"`
	IntervalRange struct {
		Max int32 `json:"max"`
		Min int32 `json:"min"`
	} `json:"intervalRange"`
	SegmentType ModelsShuttleSegmentSegmentType `json:"segmentType"`
	StartTime   ScalarsTimeISO                  `json:"startTime"`
}

// ModelsShuttleSegmentSegmentType defines model for ModelsShuttleSegment.SegmentType.
type ModelsShuttleSegmentSegmentType string

// ModelsStopRef defines model for Models.StopRef.
type ModelsStopRef struct {
	Lat      *ScalarsLatitude  `json:"lat,omitempty"`
	Lon      *ScalarsLongitude `json:"lon,omitempty"`
	StopId   int32             `json:"stopId"`
	StopName string            `json:"stopName"`
}

// ModelsTimePair defines model for Models.TimePair.
type ModelsTimePair struct {
	Arrival   ScalarsTimeISO `json:"arrival"`
	Departure ScalarsTimeISO `json:"departure"`
}

// RoutesTimetableBadRequest defines model for Routes.TimetableBadRequest.
type RoutesTimetableBadRequest struct {
	union json.RawMessage
}

// RoutesTimetableBadRequest0 HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest0 struct {
	Code    RoutesTimetableBadRequest0Code    `json:"code"`
	Detail  RoutesTimetableBadRequest0Detail  `json:"detail"`
	Message RoutesTimetableBadRequest0Message `json:"message"`
}

// RoutesTimetableBadRequest0Code defines model for RoutesTimetableBadRequest.0.Code.
type RoutesTimetableBadRequest0Code string

// RoutesTimetableBadRequest0Detail defines model for RoutesTimetableBadRequest.0.Detail.
type RoutesTimetableBadRequest0Detail string

// RoutesTimetableBadRequest0Message defines model for RoutesTimetableBadRequest.0.Message.
type RoutesTimetableBadRequest0Message string

// RoutesTimetableBadRequest1 HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest1 struct {
	Code    RoutesTimetableBadRequest1Code    `json:"code"`
	Detail  RoutesTimetableBadRequest1Detail  `json:"detail"`
	Message RoutesTimetableBadRequest1Message `json:"message"`
}

// RoutesTimetableBadRequest1Code defines model for RoutesTimetableBadRequest.1.Code.
type RoutesTimetableBadRequest1Code string

// RoutesTimetableBadRequest1Detail defines model for RoutesTimetableBadRequest.1.Detail.
type RoutesTimetableBadRequest1Detail string

// RoutesTimetableBadRequest1Message defines model for RoutesTimetableBadRequest.1.Message.
type RoutesTimetableBadRequest1Message string

// RoutesTimetableBadRequest2 HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest2 struct {
	Code    RoutesTimetableBadRequest2Code    `json:"code"`
	Detail  RoutesTimetableBadRequest2Detail  `json:"detail"`
	Message RoutesTimetableBadRequest2Message `json:"message"`
}

// RoutesTimetableBadRequest2Code defines model for RoutesTimetableBadRequest.2.Code.
type RoutesTimetableBadRequest2Code string

// RoutesTimetableBadRequest2Detail defines model for RoutesTimetableBadRequest.2.Detail.
type RoutesTimetableBadRequest2Detail string

// RoutesTimetableBadRequest2Message defines model for RoutesTimetableBadRequest.2.Message.
type RoutesTimetableBadRequest2Message string

// RoutesTimetableBadRequest3 HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest3 struct {
	Code    RoutesTimetableBadRequest3Code    `json:"code"`
	Detail  RoutesTimetableBadRequest3Detail  `json:"detail"`
	Message RoutesTimetableBadRequest3Message `json:"message"`
}

// RoutesTimetableBadRequest3Code defines model for RoutesTimetableBadRequest.3.Code.
type RoutesTimetableBadRequest3Code string

// RoutesTimetableBadRequest3Detail defines model for RoutesTimetableBadRequest.3.Detail.
type RoutesTimetableBadRequest3Detail string

// RoutesTimetableBadRequest3Message defines model for RoutesTimetableBadRequest.3.Message.
type RoutesTimetableBadRequest3Message string

// RoutesTimetableBadRequest4 HTTP 400 Bad Request - The request cannot be processed due to client error.
type RoutesTimetableBadRequest4 struct {
	Code    RoutesTimetableBadRequest4Code    `json:"code"`
	Detail  RoutesTimetableBadRequest4Detail  `json:"detail"`
	Message RoutesTimetableBadRequest4Message `json:"message"`
}

// RoutesTimetableBadRequest4Code defines model for RoutesTimetableBadRequest.4.Code.
type RoutesTimetableBadRequest4Code string

// RoutesTimetableBadRequest4Detail defines model for RoutesTimetableBadRequest.4.Detail.
type RoutesTimetableBadRequest4Detail string

// RoutesTimetableBadRequest4Message defines model for RoutesTimetableBadRequest.4.Message.
type RoutesTimetableBadRequest4Message string

// ScalarsDateISO defines model for Scalars.DateISO.
type ScalarsDateISO = openapi_types.Date

// ScalarsLatitude defines model for Scalars.Latitude.
type ScalarsLatitude = float32

// ScalarsLongitude defines model for Scalars.Longitude.
type ScalarsLongitude = float32

// ScalarsTimeISO defines model for Scalars.TimeISO.
type ScalarsTimeISO = string

// BusStopsGetBusStopTimetableParams defines parameters for BusStopsGetBusStopTimetable.
type BusStopsGetBusStopTimetableParams struct {
	Date ScalarsDateISO `form:"date" json:"date"`
	From ScalarsDateISO `form:"from" json:"from"`
	To   ScalarsDateISO `form:"to" json:"to"`
}

// AsModelsFixedSegment returns the union data inside the ModelsBusStopSegment as a ModelsFixedSegment
func (t ModelsBusStopSegment) AsModelsFixedSegment() (ModelsFixedSegment, error) {
	var body ModelsFixedSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsFixedSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) FromModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsFixedSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsFixedSegment
func (t *ModelsBusStopSegment) MergeModelsFixedSegment(v ModelsFixedSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelsFrequencySegment returns the union data inside the ModelsBusStopSegment as a ModelsFrequencySegment
func (t ModelsBusStopSegment) AsModelsFrequencySegment() (ModelsFrequencySegment, error) {
	var body ModelsFrequencySegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsFrequencySegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsFrequencySegment
func (t *ModelsBusStopSegment) FromModelsFrequencySegment(v ModelsFrequencySegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsFrequencySegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsFrequencySegment
func (t *ModelsBusStopSegment) MergeModelsFrequencySegment(v ModelsFrequencySegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelsShuttleSegment returns the union data inside the ModelsBusStopSegment as a ModelsShuttleSegment
func (t ModelsBusStopSegment) AsModelsShuttleSegment() (ModelsShuttleSegment, error) {
	var body ModelsShuttleSegment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelsShuttleSegment overwrites any union data inside the ModelsBusStopSegment as the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) FromModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelsShuttleSegment performs a merge with any union data inside the ModelsBusStopSegment, using the provided ModelsShuttleSegment
func (t *ModelsBusStopSegment) MergeModelsShuttleSegment(v ModelsShuttleSegment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModelsBusStopSegment) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModelsBusStopSegment) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRoutesTimetableBadRequest0 returns the union data inside the RoutesTimetableBadRequest as a RoutesTimetableBadRequest0
func (t RoutesTimetableBadRequest) AsRoutesTimetableBadRequest0() (RoutesTimetableBadRequest0, error) {
	var body RoutesTimetableBadRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoutesTimetableBadRequest0 overwrites any union data inside the RoutesTimetableBadRequest as the provided RoutesTimetableBadRequest0
func (t *RoutesTimetableBadRequest) FromRoutesTimetableBadRequest0(v RoutesTimetableBadRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoutesTimetableBadRequest0 performs a merge with any union data inside the RoutesTimetableBadRequest, using the provided RoutesTimetableBadRequest0
func (t *RoutesTimetableBadRequest) MergeRoutesTimetableBadRequest0(v RoutesTimetableBadRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoutesTimetableBadRequest1 returns the union data inside the RoutesTimetableBadRequest as a RoutesTimetableBadRequest1
func (t RoutesTimetableBadRequest) AsRoutesTimetableBadRequest1() (RoutesTimetableBadRequest1, error) {
	var body RoutesTimetableBadRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoutesTimetableBadRequest1 overwrites any union data inside the RoutesTimetableBadRequest as the provided RoutesTimetableBadRequest1
func (t *RoutesTimetableBadRequest) FromRoutesTimetableBadRequest1(v RoutesTimetableBadRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoutesTimetableBadRequest1 performs a merge with any union data inside the RoutesTimetableBadRequest, using the provided RoutesTimetableBadRequest1
func (t *RoutesTimetableBadRequest) MergeRoutesTimetableBadRequest1(v RoutesTimetableBadRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoutesTimetableBadRequest2 returns the union data inside the RoutesTimetableBadRequest as a RoutesTimetableBadRequest2
func (t RoutesTimetableBadRequest) AsRoutesTimetableBadRequest2() (RoutesTimetableBadRequest2, error) {
	var body RoutesTimetableBadRequest2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoutesTimetableBadRequest2 overwrites any union data inside the RoutesTimetableBadRequest as the provided RoutesTimetableBadRequest2
func (t *RoutesTimetableBadRequest) FromRoutesTimetableBadRequest2(v RoutesTimetableBadRequest2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoutesTimetableBadRequest2 performs a merge with any union data inside the RoutesTimetableBadRequest, using the provided RoutesTimetableBadRequest2
func (t *RoutesTimetableBadRequest) MergeRoutesTimetableBadRequest2(v RoutesTimetableBadRequest2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoutesTimetableBadRequest3 returns the union data inside the RoutesTimetableBadRequest as a RoutesTimetableBadRequest3
func (t RoutesTimetableBadRequest) AsRoutesTimetableBadRequest3() (RoutesTimetableBadRequest3, error) {
	var body RoutesTimetableBadRequest3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoutesTimetableBadRequest3 overwrites any union data inside the RoutesTimetableBadRequest as the provided RoutesTimetableBadRequest3
func (t *RoutesTimetableBadRequest) FromRoutesTimetableBadRequest3(v RoutesTimetableBadRequest3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoutesTimetableBadRequest3 performs a merge with any union data inside the RoutesTimetableBadRequest, using the provided RoutesTimetableBadRequest3
func (t *RoutesTimetableBadRequest) MergeRoutesTimetableBadRequest3(v RoutesTimetableBadRequest3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoutesTimetableBadRequest4 returns the union data inside the RoutesTimetableBadRequest as a RoutesTimetableBadRequest4
func (t RoutesTimetableBadRequest) AsRoutesTimetableBadRequest4() (RoutesTimetableBadRequest4, error) {
	var body RoutesTimetableBadRequest4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoutesTimetableBadRequest4 overwrites any union data inside the RoutesTimetableBadRequest as the provided RoutesTimetableBadRequest4
func (t *RoutesTimetableBadRequest) FromRoutesTimetableBadRequest4(v RoutesTimetableBadRequest4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoutesTimetableBadRequest4 performs a merge with any union data inside the RoutesTimetableBadRequest, using the provided RoutesTimetableBadRequest4
func (t *RoutesTimetableBadRequest) MergeRoutesTimetableBadRequest4(v RoutesTimetableBadRequest4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RoutesTimetableBadRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RoutesTimetableBadRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/bus-stops)
	BusStopsGetAllBusStops(ctx echo.Context) error

	// (GET /api/bus-stops/{id})
	BusStopsGetBusStopDetails(ctx echo.Context, id int32) error

	// (GET /api/bus-stops/{id}/timetables)
	BusStopsGetBusStopTimetable(ctx echo.Context, id int32, params BusStopsGetBusStopTimetableParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BusStopsGetAllBusStops converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopsGetAllBusStops(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopsGetAllBusStops(ctx)
	return err
}

// BusStopsGetBusStopDetails converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopsGetBusStopDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopsGetBusStopDetails(ctx, id)
	return err
}

// BusStopsGetBusStopTimetable converts echo context to params.
func (w *ServerInterfaceWrapper) BusStopsGetBusStopTimetable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BusStopsGetBusStopTimetableParams
	// ------------- Required query parameter "date" -------------

	err = runtime.BindQueryParameter("form", false, true, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", false, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", false, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BusStopsGetBusStopTimetable(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/bus-stops", wrapper.BusStopsGetAllBusStops)
	router.GET(baseURL+"/api/bus-stops/:id", wrapper.BusStopsGetBusStopDetails)
	router.GET(baseURL+"/api/bus-stops/:id/timetables", wrapper.BusStopsGetBusStopTimetable)

}
